@page "/"
@using QuickHelp.Application.Abstractions
@using QuickHelp.Domain
@using System.Threading

@inject IDocumentFilterer DocumentFilterer
@inject IDocumentRepository DocumentRepository

<div class="row mb-5">
    <div class="col-11">
        <input type="text"
               class="form-control"
               placeholder="Enter your search term..."
               @bind="SearchString" @bind:event="oninput"/>
        <div id="options-list-group" class="list-group position-absolute">
            @foreach (var document in documents)
            {
                <button class="list-group-item list-group-item-action" document="@document" @onclick="@( e => ShowDocument( document ) )">@document.Name.Value</button>
            }
        </div>
    </div>
    <div class="col-1">
        <button class="btn btn-primary">Search</button>
    </div>
</div>

@if (selectedDocument != null)
{
    <div class="mb-5">
        <h1 class="mb-2">
            @selectedDocument.Name.Value
            <button class="btn btn-primary" @onclick="( e => CopyText() )">Copy</button>
        </h1>
        <div style="white-space: pre-wrap; word-wrap: break-word;">@selectedDocument.Body.Value</div>
    </div>
}

<div>
    <a href="/Add/@searchString" class="btn btn-success">Add</a>
    <a href="/Edit/@(selectedDocument?.Id.Value ?? Guid.Empty)" class="btn btn-secondary @hiddenButtonsClass">Edit</a>
    <button class="btn btn-danger @hiddenButtonsClass" @onclick="(e => DeleteDocument( selectedDocument ))">Delete</button>
</div>

@code
{
    private List<Document> documents = new List<Document>();
    private Document selectedDocument;
    CancellationTokenSource currentSearchCts;
    private string searchString;
    private string hiddenButtonsClass => selectedDocument == null ? "d-none" : string.Empty;

    private string SearchString
    {
        get => searchString;
        set
        {
            searchString = value;
            if (!string.IsNullOrEmpty(searchString))
            {
                _ = SearchDebounced(searchString);
                return;
            }

            currentSearchCts?.Cancel();
            ResetSearch();
        }
    }

    private async Task SearchDebounced(string searchString)
    {
        try
        {
            currentSearchCts?.Cancel();
            currentSearchCts = new CancellationTokenSource();
            var cancellationToken = currentSearchCts.Token;

            await Task.Delay(500);
            if (!cancellationToken.IsCancellationRequested)
            {
                var results = DocumentFilterer.Filter(searchString);
                if (!cancellationToken.IsCancellationRequested)
                {
                    documents = results;
                }
            }

            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void ShowDocument(Document document)
    {
        selectedDocument = document;
        ResetSearch();
    }

    private void DeleteDocument(Document document)
    {
        document.Delete();
        DocumentRepository.Save(document);
        UnselectDocument();
        ResetSearch();
    }

    private void UnselectDocument()
        => selectedDocument = null;

    private void ResetSearch()
    {
        searchString = string.Empty;
        documents = new List<Document>();
    }

    private void CopyText()
    {
        TextCopy.ClipboardService.SetText(selectedDocument.Body.Value);
    }
}